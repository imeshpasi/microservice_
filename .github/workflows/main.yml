name: Build and Push Docker Images to Azure Container Registry

on:
  push:
    branches:
      - main  # Trigger on changes to the main branch
  pull_request:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Log in to Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}  # Azure ACR login server (e.g., myacr.azurecr.io)
          username: microservicecon  # ACR username
          password: 3qZV8ZC53McCVQhwWMiVNT6sNFXymDYNVyV52L+lZ0+ACRAQ2gIl # Store your ACR password securely in GitHub Secrets

      # 4. Build Docker Image for auth-service and push to ACR
      - name: Build Docker Image for auth-service
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/auth-service:${GITHUB_SHA} ./auth-service
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/auth-service:${GITHUB_SHA}

      # 5. Build Docker Image for config-server and push to ACR
      - name: Build Docker Image for config-server
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/config-server:${GITHUB_SHA} ./config-server
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/config-server:${GITHUB_SHA}

      # 6. Build Docker Image for eureka-server and push to ACR
      - name: Build Docker Image for eureka-server
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/eureka-server:${GITHUB_SHA} ./eureka-server
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/eureka-server:${GITHUB_SHA}

      # 7. Build Docker Image for file-storage and push to ACR
      - name: Build Docker Image for file-storage
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/file-storage:${GITHUB_SHA} ./file-storage
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/file-storage:${GITHUB_SHA}

      # 8. Build Docker Image for gateway and push to ACR
      - name: Build Docker Image for gateway
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/gateway:${GITHUB_SHA} ./gateway
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/gateway:${GITHUB_SHA}

      # 9. Build Docker Image for job-service and push to ACR
      - name: Build Docker Image for job-service
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/job-service:${GITHUB_SHA} ./job-service
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/job-service:${GITHUB_SHA}

      # 10. Build Docker Image for notification-service and push to ACR
      - name: Build Docker Image for notification-service
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/notification-service:${GITHUB_SHA} ./notification-service
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/notification-service:${GITHUB_SHA}

      # 11. Build Docker Image for user-service and push to ACR
      - name: Build Docker Image for user-service
        run: |
          docker buildx build --platform linux/amd64 --tag ${{ secrets.ACR_LOGIN_SERVER }}/user-service:${GITHUB_SHA} ./user-service
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/user-service:${GITHUB_SHA}
          
  deploy_to_aks:
    needs: build_and_push  # ⬅️ Ensures this job runs AFTER build_and_push succeeds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true


      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
         version: 'v1.28.2'  # Specify the desired kubectl version


      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy all services using Kustomize
        run: kubectl apply -k .
         
